#pragma checksum "/Users/borakasmer/Projects/blazorWords/Pages/Words.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9ae6116e2ed1851515283d721e2364a19d59341c"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace blazorWords.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using blazorWords;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/borakasmer/Projects/blazorWords/_Imports.razor"
using blazorWords.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/borakasmer/Projects/blazorWords/Pages/Words.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/wordgame")]
    public partial class Words : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 67 "/Users/borakasmer/Projects/blazorWords/Pages/Words.razor"
       
    private int globalScore=0;
    private bool isFullRoom=false;
    ElementReference ReferenceToLoginControl;
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userName;
    private string _otherUser;
    private int _otherMoney = 0;
    private string word;
    private string connectionID;
    private bool isLogin = false;
    private int money = 0;
    private string answer;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/wordhub"))
            .Build();

        hubConnection.On<string, string, int>("GetConnectionId", async (_connectionID, otherUser, otherMoney) =>
          {       
              await JSRuntime.InvokeAsync<object>("console.log", "ConnectionID :" + _connectionID);                           
          connectionID = _connectionID;
              if (otherUser != null && IsRenderUI == true)
              {
                  _otherMoney = otherMoney;
                  _otherUser = otherUser;
                  StateHasChanged();
              }
          });

        hubConnection.On<string, string, int>("ReceiveUser", (_userName, _connectionId, _money) =>
         {
             if (userName == _userName)
             {
                 money = _money;
                 isLogin = true;
             }
             else
             {
                 _otherMoney = _money;
                 _otherUser = _userName;
             }
             StateHasChanged();
         });

        hubConnection.On<string, string>("RemoveUser", (_userName, _connectionId) =>
            {
                if (userName != _userName)
                {
                    _otherUser = null;
                    _otherMoney = 0;
                    

#line default
#line hidden
#nullable disable
#nullable restore
#line 120 "/Users/borakasmer/Projects/blazorWords/Pages/Words.razor"
                                    
                    word = null;
                    StateHasChanged();
                }
            });

        hubConnection.On<string, string, int>("ReceiveWord", (_wordText, _userName, _money) =>
          {
              if (userName != _userName)
              {
                  _otherUser = _userName;
                  _otherMoney = _money;
              }
              else
              {
                  money = _money;
                  isLogin = true;
              }
              word = _wordText;
              StateHasChanged();
          });

        hubConnection.On<string>("RefreshWord", async (_wordText) =>
        {
            for (int i = 0; i < word.Length; i++)
            {
                if (word[i] != ' ')
                {
                    string imgId = "image-" + @i;
                    string lblId = "label-" + @i;

                    await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                          new { id = imgId, attrib = "display", value = "inline" });

                    await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                          new { id = lblId, attrib = "display", value = "none" },
                                          new { id = lblId, attrib = "font-size", value = "65px" });
                }
            }

            word = _wordText;
            answer = "";
            StateHasChanged();
        });

        hubConnection.On<int, string, string, int>("ReceiveOpen", async (counter, imgId, lblId, _money) =>
           {
               _otherMoney = _money;
               StateHasChanged();
               await Open(counter, imgId, lblId, true);
           });

        hubConnection.On("ComeLater", async () =>
           { 
                isFullRoom = true;
                await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                                    new { id = "blazorBody", attrib = "background-image", value = "url('../Images/wall31.jpeg')" });
                  
                StateHasChanged();              
           });
           

        hubConnection.On<string, string,int>("ReceiveAnswer", async (userName, connectionID,money) =>
           {
               for (int i = 0; i < word.Length; i++)
               {
                   if (word[i] != ' ')
                   {
                       string imgId = "image-" + @i;
                       string lblId = "label-" + @i;

                       await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                               new { id = imgId, attrib = "display", value = "none" });

                       await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                               new { id = lblId, attrib = "display", value = "inline" },
                                               new { id = lblId, attrib = "font-size", value = "65px" });
                   }
               }
               System.Threading.Thread.Sleep(1000);
               await JSRuntime.InvokeAsync<object>("alert", "Winner :" + userName);
                   _otherMoney=money;
           });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync("LoginUser", userName, connectionID);

    async Task Answer()
    {
        int totalEarnMoney=0;
        if (answer.ToUpper() == word.ToUpper())
        {
            globalScore++;
            for (int i = 0; i < word.Length; i++)
            {
                 bool result = await JSRuntime.InvokeAsync<bool>("getStyleForElement", 
                        new { id = "label-" + @i, attrib = "display"});
                        if(word[i] != ' ' && !result)
                        {
                            money+=10;
                            totalEarnMoney+=10;
                        }
                if (word[i] != ' ')
                {
                    string imgId = "image-" + @i;
                    string lblId = "label-" + @i;                                                           
                    
                    await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                                    new { id = imgId, attrib = "display", value = "none" });

                    await JSRuntime.InvokeVoidAsync("applyStyleForElement",
                                                    new { id = lblId, attrib = "display", value = "inline" },
                                                    new { id = lblId, attrib = "font-size", value = "65px" });                                                    
                }                
            }
            await hubConnection.SendAsync("sendAnswer", userName, connectionID,money);
            System.Threading.Thread.Sleep(1000);

            await JSRuntime.InvokeAsync<object>("alert", "Winner :" + userName +"\n Total Reward :" +totalEarnMoney+"â‚º");

            await hubConnection.SendAsync("Refresh");
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
    private async Task Open(int counter, string imgId, string lblId, bool isOtherOpen = false)
    {
        if (isOtherOpen == false && money >= 10)
        {
            money = money - 10;
            await JSRuntime.InvokeVoidAsync("applyStyleForElement",
         new { id = imgId, attrib = "display", value = "none" });

            await JSRuntime.InvokeVoidAsync("applyStyleForElement",
          new { id = lblId, attrib = "display", value = "inline" },
          new { id = lblId, attrib = "font-size", value = "65px" });

            await hubConnection.SendAsync("OpenClient", counter, imgId, lblId, money);
        }
        else if (isOtherOpen == true)
        {
            await JSRuntime.InvokeVoidAsync("applyStyleForElement",
        new { id = imgId, attrib = "display", value = "none" });

            await JSRuntime.InvokeVoidAsync("applyStyleForElement",
          new { id = lblId, attrib = "display", value = "inline" },
          new { id = lblId, attrib = "font-size", value = "65px" });
        }
    }

    bool IsRenderUI = false;
    protected override void OnAfterRender(bool firstRender)
    {
        IsRenderUI = true;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("FocusScript.setFocus", ReferenceToLoginControl);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
